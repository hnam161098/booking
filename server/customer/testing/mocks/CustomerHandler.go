// Code generated by mockery v2.21.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "grpc/server/customer/models"
)

// CustomerHandler is an autogenerated mock type for the CustomerHandler type
type CustomerHandler struct {
	mock.Mock
}

// AddTagsCustomer provides a mock function with given fields: ctx, model
func (_m *CustomerHandler) AddTagsCustomer(ctx context.Context, model *models.AddTags) (*models.Customer, error) {
	ret := _m.Called(ctx, model)

	var r0 *models.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.AddTags) (*models.Customer, error)); ok {
		return rf(ctx, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.AddTags) *models.Customer); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.AddTags) error); ok {
		r1 = rf(ctx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCustomer provides a mock function with given fields: ctx, model
func (_m *CustomerHandler) CreateCustomer(ctx context.Context, model *models.Customer) (*models.Customer, error) {
	ret := _m.Called(ctx, model)

	var r0 *models.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Customer) (*models.Customer, error)); ok {
		return rf(ctx, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Customer) *models.Customer); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Customer) error); ok {
		r1 = rf(ctx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomer provides a mock function with given fields: ctx, model
func (_m *CustomerHandler) DeleteCustomer(ctx context.Context, model *models.Customer) (int, error) {
	ret := _m.Called(ctx, model)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Customer) (int, error)); ok {
		return rf(ctx, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Customer) int); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Customer) error); ok {
		r1 = rf(ctx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTagsOfCustomer provides a mock function with given fields: ctx, model
func (_m *CustomerHandler) DeleteTagsOfCustomer(ctx context.Context, model *models.DeleteTags) (*models.Customer, error) {
	ret := _m.Called(ctx, model)

	var r0 *models.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.DeleteTags) (*models.Customer, error)); ok {
		return rf(ctx, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.DeleteTags) *models.Customer); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.DeleteTags) error); ok {
		r1 = rf(ctx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCustomer provides a mock function with given fields: ctx
func (_m *CustomerHandler) GetAllCustomer(ctx context.Context) ([]*models.Customer, error) {
	ret := _m.Called(ctx)

	var r0 []*models.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Customer, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Customer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomer provides a mock function with given fields: ctx, model
func (_m *CustomerHandler) GetCustomer(ctx context.Context, model *models.Customer) (*models.Customer, error) {
	ret := _m.Called(ctx, model)

	var r0 *models.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Customer) (*models.Customer, error)); ok {
		return rf(ctx, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Customer) *models.Customer); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Customer) error); ok {
		r1 = rf(ctx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomer provides a mock function with given fields: ctx, model
func (_m *CustomerHandler) UpdateCustomer(ctx context.Context, model *models.Customer) (*models.Customer, error) {
	ret := _m.Called(ctx, model)

	var r0 *models.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Customer) (*models.Customer, error)); ok {
		return rf(ctx, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Customer) *models.Customer); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Customer) error); ok {
		r1 = rf(ctx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCustomerHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewCustomerHandler creates a new instance of CustomerHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCustomerHandler(t mockConstructorTestingTNewCustomerHandler) *CustomerHandler {
	mock := &CustomerHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
